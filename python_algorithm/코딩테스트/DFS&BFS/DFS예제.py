# 230718

# DFS 예제를 구현해본다.

# 깊이 우선 탐색 알고리즘인 DFS는 스택 자료구조에 기초한다는 점에서 구현이 간단하다.
# 실제로는 스택을 쓰지 않아도 되며 탐색을 수행함에 있어서 데이터의 개수가 N개인 겨웅 O(N)의 시간이 소요된다는 특징을 가지고 있다.


# DFS 메서드 정의

def dfs(graph, v, visited):
    # 현재 노드를 방문 처리
    visited[v] = True
    print(v, visited)
    
    # 현재 노드와 연결된 다른 노드를 재귀적으로 방문
    for i in graph[v]:
        if visited[i] == False:
            # 재귀 함수로 쉽게 구현
            dfs(graph, i, visited)

# 각 노드가 연결된 정보를 리스트 자료형으로 표현*(2차원 리스트)
graph = [ [],[2,3,8],[1,7],[1,4,5],[3,5],[3,4],[7],[2,6,8],[1,7]]
# 각 노드가 방문된 정보를 리스트 자료형을 표현 (1차원 리스트)
visited = [False for i in range(9)]
print(visited)

# 정의된 DFS 함수 호출
if __name__ == "__main__":
    dfs(graph, 1 , visited)


# 키포인트 특정 위치에 방문을 했는지 파악하는 visited 매우 중요
# 현재의 위치에서 방문을 했는지 파악을 한 후 다음 과정으로 넘어간다. 이 때 for 구문으로 해당 리스트의 값을 가져온다ㅣ
# 지금은 연결된 노드만을 가지고 있다. 하지만 그 전 예제처럼 거리가 포함된 값을 가지고 있다면 어떻게 해야하는가>
