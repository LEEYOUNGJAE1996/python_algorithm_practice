순차 탐색 
리스트 내에서 데이터를 매우 빠르게 탐색하는 이진 탐색 알고리즘에 대해서 공부한다.
이진 탐색에 대해 알아보기 전에 가장 기본 탐색 방법인 순차 탐색에 대해 먼저 이해한다.

순차 탐색이란 리스트 안에 있는 특정한 데이터를 찾기 위해 앞에서부터 데이터를 하나씩 차례대로 확인하는 방법이다.
보통 정렬되지 않은 리스트에서 데이터를 찾아야할 때 사용한다. 리스트 내에 데이터가 아무리 많아도 시간만 충분하다면 항상 원하는 원소를 찾을 수 있다는 장점이 있다.

이진 탐색 : 반으로 쪼개면서 탐색하기

이진탐색은 배열 내부의 데이터가 정렬되어 있어야만 사용할 수 있는 알고리즘이다. 
데이터가 무작위일 때는 사용할 수 없지만 , 이미 정렬되어 있다면 매우 빠르게 데이터를 찾을 수 있다는 특징이 있다.
이진 탐색은 탐색 범위를 절반씩 좁혀가며 데이터를 탐색하는 특징이 있다.

이진 탐색은 위치를 나타내는 변수 3개를 사용하는데 탐색하고자 하는 범위의 시작점, 끝점 그리고 중간점이다. 
찾으려는 데이터와 중간점 위치에 있는 데이터를 반복적으로 비교해서 우너하는 데이터를 찾는게 이진 탐색 과정이다.

이진 탐색은 한 번 확인할 때마다 확인하는 원소의 개수가 절반씩 줄어든다는 점에서 시간 복잡도가 O(logN)이다. 


코딩테스트에서의 이진 탐색

예제를 통해서 코드를 보면 이진 탐색이 단순하게 느껴질 수 있다. 정작 참고할 소스코드가 없는 상태에서 이진 탐색의 소스코드를 구현하는 것은 상당히 어려운 작업이 될 수 있다.
이진 탐색의 경우 코드가 짧으니 여러 차례 코드를 입력하며 자연스럽게 외워야한다. 자주 출제되는 문제이니

이진 탐색의 원리는 다른 알고리즘에서도 폭넓게 적용되는 원리와 유사하기 때문에 매우 중요하다.
또, 높은 난이도의 문제에서는 이진 탐색 알고리즘을 모두 사용해서 풀어야하는 문제가 출제된적이 있다. 이런 문제는 난이도가 상당히 높은 데다가 구현할 코드량이 많아 실수하기 쉽다.
이때, 이진 탐색 코드만 암기하고 있어도 꽤 도움이 된다.
더불어 코딩 테스트의 이진 탐색 문제는 탐색 범위가 큰 상황에서의 탐색을 가정하는 문제가 많다. 
따라서 탐색 범위가 2000만을 넘어가면 이진 탐색으로 문제에 접근해보길 권한다.

트리 자료구조를
이진 탐색은 전제 조건이 데이터 정렬이다. 예를 들어  동작하는 프로그램에서 데이터를 정렬해두는 경우가 많으므로 이진 탐색을 효과적으로 사용할 수 있다.
데이터베이스는 내부적으로 대용량 데이터 처리에 적합한 트리 자료구조를 이용하여 항상 데이터가 정렬되어 있다. 따라서 데이터베이스 에서의 탐색은 이진 탐색과는 조금 다르지만, 이진 탐색과 유사한 방법을 이용해 탐색을 항상 빠르게 수행하도록 설계되어 있어서 데이터가 많아도 탐색하는 속도가 빠르다.

그렇다면 트리 자료주로란?
트리 자료구조는 노드와 노드의 연결로 표현하며 여기에서 노드는 정보의 단위로서 어떠한 정보를 가지고 있는 개체로 이해할 수 있다.
트리는 부모 노드와 자식 노드의 관계로 표현한다.
트리의 최상단 노드를 루트 노드라고 한다.
트리의 최하단 노드를 단말 노드라고 한다.
트리에서 일부를 떼어내도 트리 구조이며, 이를 서브 트리라고한다.
트리는 파일 시스템과 같이 게층적이고 정렬된 데이터를 다루기에 적합하다.

이진 탐색 트리!
트리 자료 구조 중에서 가장 간단한 형태가 이진 탐색 트리이다.
이진 탐색 트리란 이진 탐색이 동작 할 수 있도록 고안된, 효울적인 탐색이 가능한 자료구조이다.
이진 탐색 트리는 다음과 같은 특징을 가진다.

- 부모 노드보다 왼쪽 자식 노드가 작다.
- 부모 노드보다 오른쪽 자식 노드가 크다.